<strong>enter</strong>(self)                      Определяет, что должен сделать менеджер контекста в начале блока, созданного оператором with. 
                                     Заметьте, что возвращаемое <strong>enter</strong> значение и есть то значение, с которым производится работа внутри with.
<strong>exit</strong>(self, exception_type, 
         exception_value, traceback) Определяет действия менеджера контекста после того, как блок будет выполнен (или прерван во время работы). 
                                     Может использоваться для контролирования исключений, чистки, любых действий которые должны быть 
                                     выполнены незамедлительно после блока внутри with. 
                                     Если блок выполнен успешно, exception_type, exception_value, и traceback будут установлены в None. 
                                     В другом случае вы сами выбираете, перехватывать ли исключение или предоставить это пользователю; 
                                     если вы решили перехватить исключение, убедитесь, что <strong>exit</strong> возвращает True после того 
                                     как всё сказано и сделано. 
                                     Если вы не хотите, чтобы исключение было перехвачено менеджером контекста, просто позвольте ему случиться.
<strong>enter</strong> и <strong>exit</strong> могут быть полезны для специфичных классов с хорошо описанным и 
распространённым поведением для их настройки и очистки ресурсов. 
Вы можете использовать эти методы и для создания общих менеджеров контекста для разных объектов. 
Вот пример:
<pre><code class="language-python">class Closer:
    '''Менеджер контекста для автоматического закрытия объекта вызовом метода close 
    в with-выражении.'''

    def __init__(self, obj):
        self.obj = obj

    def __enter__(self):
        return self.obj # привязка к активному объекту with-блока

    def __exit__(self, exception_type, exception_val, trace):
        try:
            self.obj.close()
        except AttributeError: # у объекта нет метода close
            print 'Not closable.'
            return True # исключение перехвачено
</code></pre>
<strong>aenter</strong>(self) — аналогично <strong>enter</strong>, только функция возвращает корутину (результат которой можно получить с помощью await)
<strong>aexit</strong>(self, exc_type, exc_value, traceback) — аналогично <strong>exit</strong>, только функция возвращает корутину (результат которой можно получить с помощью await)
<pre><code class="language-python">class AsyncContextManager:
    async def __aenter__(self):
        await log(&quot;entering context&quot;)

    async def __aexit__(self, exc_type, exc_value, traceback):
        await log(&quot;exiting context&quot;)

async with AsyncContextManager():
    print(&quot;in context manager&quot;)

'entering context'
'in context manager'
'exiting context'
</code></pre>