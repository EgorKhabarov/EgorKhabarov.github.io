<strong>int</strong>(self)           в int.
<strong>long</strong>(self)          в long.
<strong>float</strong>(self)         в float.
<strong>complex</strong>(self)       в комплексное число.
<strong>oct</strong>(self)           в восьмеричное число.
<strong>hex</strong>(self)           в шестнадцатиричное число.
<strong>index</strong>(self)         Преобразование типа к int, когда объект используется в срезах (выражения вида [start:stop:step]). 
                        Если вы определяете свой числовый тип, который может использоваться как индекс списка, вы должны определить <strong>index</strong>.
<strong>trunc</strong>(self)         Вызывается при math.trunc(self). 
                        Должен вернуть своё значение, обрезанное до целочисленного типа (обычно long).
<strong>str</strong>(self)           Определяет поведение функции str(), вызванной для экземпляра вашего класса.
<strong>repr</strong>(self)          Определяет поведение функции repr(), вызыванной для экземпляра вашего класса. 
                        Главное отличие от str() в целевой аудитории. 
                        repr() больше предназначен для машинно-ориентированного вывода 
                        (более того, это часто должен быть валидный код на Питоне), а str() предназначен для чтения людьми.
<strong>bytes</strong>(self)         ведёт себя так же как <strong>str</strong>
<strong>format</strong>(self, formatstr)
                        Определяет поведение, когда экземпляр вашего класса используется в форматировании строк нового стиля. 
                        Например, "Hello, {0:abc}!".format(a) приведёт к вызову a.<strong>format</strong>("abc"). 
                        Это может быть полезно для определения ваших собственных числовых или строковых типов, 
                        которым вы можете захотеть предоставить какие-нибудь специальные опции форматирования.
<strong>hash</strong>(self)          Определяет поведение функции hash(), вызыванной для экземпляра вашего класса. 
                        Метод должен возвращать целочисленное значение, которое будет использоваться 
                        для быстрого сравнения ключей в словарях. 
                        Заметьте, что в таком случае обычно нужно определять и <strong>eq</strong> тоже. 
                        Руководствуйтесь следующим правилом: a == b подразумевает hash(a) == hash(b).
<strong>bool</strong>(self)          Определяет поведение функции bool(), вызванной для экземпляра вашего класса. 
                        Должна вернуть True или False, в зависимости от того, 
                        когда вы считаете экземпляр соответствующим True или False.
<strong>dir</strong>(self)           Определяет поведение функции dir(), вызванной на экземпляре вашего класса. 
                        Этот метод должен возвращать пользователю список атрибутов. 
                        Обычно, определение <strong>dir</strong> не требуется, но может быть жизненно важно для интерактивного 
                        использования вашего класса, если вы переопределили <strong>getattr</strong> или <strong>getattribute</strong> 
                        (с которыми вы встретитесь в следующей части), 
                        или каким-либо другим образом динамически создаёте атрибуты.
<strong>sizeof</strong>(self)        Определяет поведение функции sys.getsizeof(), вызыванной на экземпляре вашего класса. 
                        Метод должен вернуть размер вашего объекта в байтах. 
                        Он главным образом полезен для классов, определённых в 
                        расширениях на C, но всё-равно полезно о нём знать.