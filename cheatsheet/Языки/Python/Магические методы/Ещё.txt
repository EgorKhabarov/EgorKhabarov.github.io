<strong>init_subclass</strong>(cls) — позволяет переопределить создание подклассов объекта. Например, добавлять дополнительные атрибуты:
<pre><code class="language-python">&gt;&gt;&gt; class Test:
&gt;&gt;&gt;     def __init_subclass__(cls, /, test_param, **kwargs):
&gt;&gt;&gt;         super().__init_subclass__(**kwargs)
&gt;&gt;&gt;         cls.test_param = test_param
&gt;&gt;&gt;
&gt;&gt;&gt; class AnotherTest(Test, test_param=&quot;Hello World&quot;):
&gt;&gt;&gt;     pass
</code></pre>
repr() это встроенная функция Python, которая возвращает строковое представление объекта
Доступ к атрибутам объекта
Доступ ко всем свойствам объекта также контролируются отдельными методами:
<strong>getattr</strong>(self, name) — вызывается методом getattr(...) или при обращении к атрибуту объекта через x.y, где x — объект, а y — атрибут.
<strong>setattr</strong>(self, name, value) — вызывается методом setattr(...)или при обращении к атрибуту объекта с последующим определением значения переданного атрибута. 
Например: x.y = 1, где x — объект, y — атрибут, а 1 — значение атрибута.
<strong>delattr</strong>(self, name) — вызывается методом delattr(...)или при ручном удалении атрибута у объекта с помощью del x.y, где  x — объект, а y — атрибут.
<strong>dir</strong>(self) — вызывается методом dir(...) и выводит список доступных атрибутов объекта.
Создание последовательностей
Любой объект может реализовать методы встроенных последовательностей (словари, кортежи, списки, строки и так далее). 
Доступ к значениям последовательности переопределяется следующими методами:
<strong>len</strong>(self) — вызывается методом len(...) и возвращает количество элементов в последовательности.
<strong>getitem</strong>(self, key) — вызывается при обращении к элементу в последовательности по его ключу (индексу). 
Метод должен выбрасывать исключение TypeError, если используется некорректный тип ключа, KeyError, 
если данному ключу не соответствует ни один элемент в последовательности. Например:
<pre><code class="language-python">&gt;&gt;&gt; list_object = [1, 2, 3, 4, 5]
&gt;&gt;&gt; print(list_object[0])
... 1
&gt;&gt;&gt;
&gt;&gt;&gt; string_object = &quot;hello world&quot;
&gt;&gt;&gt; print(string_object[0:5])
... 'hello'
&gt;&gt;&gt;
&gt;&gt;&gt; dict_object = {&quot;key0&quot;: True, &quot;key1&quot;: False}
&gt;&gt;&gt; print(dict_object[&quot;key0&quot;])
... True
</code></pre>
<strong>setitem</strong>(self, key, value) — вызывается при присваивании какого-либо значения элементу в последовательности. 
Также может выбрасывать исключения TypeError и KeyError. Например:
<pre><code class="language-python">&gt;&gt;&gt; list_object = [1, 2, 3, 4, 5]
&gt;&gt;&gt; list_object[0] = 78
&gt;&gt;&gt; print(list_object)
... [78, 2, 3, 4, 5]
&gt;&gt;&gt;
&gt;&gt;&gt; dict_object = {&quot;key0&quot;: True, &quot;key1&quot;: False}
&gt;&gt;&gt; dict_object[&quot;key0&quot;] = False
&gt;&gt;&gt; print(dict_object)
... {&quot;key0&quot;: False, &quot;key1&quot;: False}
</code></pre>
<strong>delitem</strong>(self, key) — вызывается при удалении значения в последовательности по его индексу (ключу) с помощью синтаксиса ключевого слова del.
<strong>missing</strong>(self, key) — вызывается в случаях, когда значения в последовательности не существует.
<strong>iter</strong>(self) — вызывается методом iter(...) и возвращает итератор последовательности, например, для использования объекта в цикле:
<pre><code class="language-python">&gt;&gt;&gt; class Test:
&gt;&gt;&gt;     def __iter__(self):
&gt;&gt;&gt;         return (1, 2, 3)
&gt;&gt;&gt;
&gt;&gt;&gt; for value in Test():
&gt;&gt;&gt;     print(value)
... 1
... 2
... 3
</code></pre>
<strong>reversed</strong>(self) — вызывается методом reversed(...) и аналогично методу <strong>iter</strong> возвращает тот же итератор, только в обратном порядке.
<strong>contains</strong>(self, item) — вызывается при проверке принадлежности элемента к последовательности с помощью in или not in.
<strong>imatmul</strong>(self, other) — умножение матриц с присваиванием, оператор @=