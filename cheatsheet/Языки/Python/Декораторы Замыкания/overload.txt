@overload - это декоратор в Python, который используется для определения перегрузки метода внутри класса. 
Перегрузка метода - это механизм, позволяющий определить несколько версий метода с разными параметрами. 
При вызове метода, интерпретатор Python выберет версию метода, которая соответствует переданным аргументам.
Пример использования @overload:
<pre><code class="language-python">from typing import overload

class MyClass:
    @overload
    def my_method(self, arg1: int) -&gt; int:
        pass

    @overload
    def my_method(self, arg1: str) -&gt; str:
        pass

    def my_method(self, arg1):
        if isinstance(arg1, int):
            return arg1 * 2
        elif isinstance(arg1, str):
            return arg1.upper()

obj = MyClass()
result1 = obj.my_method(2)
print(result1) # 4

result2 = obj.my_method(&quot;hello&quot;)
print(result2) # HELLO
</code></pre>
В этом примере мы определили класс MyClass и внутри него определили метод my_method с помощью декоратора @overload. 
Мы определили две версии метода: одна принимает целое число и возвращает его удвоенное значение, а другая принимает строку и возвращает ее в верхнем регистре. 
Наконец, мы определили основную версию метода, которая выбирает нужную версию метода в зависимости от типа переданного аргумента.