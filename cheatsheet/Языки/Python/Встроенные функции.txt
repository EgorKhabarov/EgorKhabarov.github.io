slice frozenset memoryview, hasattr, reversed, <strong>import</strong>, staticmethod, setattr, property, object, 
locals, globals, getattr, complex, compile, bytearray, abs, bin, bytes, callable, chr, classmethod, 
delattr, dir, divmod, filter, oct, nonlocal
slice - используется для создания срезов (slice) из последовательности (sequence), таких как строки, списки, кортежи и т.д. Пример:
<pre><code class="language-python">my_list = [1, 2, 3, 4, 5]
slice_obj = slice(1, 4)
print(my_list[slice_obj])  # Output: [2, 3, 4]
</code></pre>
frozenset - это неизменяемый тип данных, представляющий собой неупорядоченное множество уникальных элементов. Пример:
<pre><code class="language-python">my_set = frozenset([1, 2, 2, 3, 4])
print(my_set)  # Output: frozenset({1, 2, 3, 4})
</code></pre>
memoryview - используется для доступа к буферу памяти объекта без копирования его данных. Пример:
<pre><code class="language-python">my_bytes = bytes([1, 2, 3, 4, 5])
my_memory_view = memoryview(my_bytes)
print(my_memory_view[1])  # Output: 2
</code></pre>
hasattr - используется для проверки наличия атрибута (метода или свойства) у объекта. Пример:
<pre><code class="language-python">class MyClass:
    def __init__(self):
        self.my_attr = 42

my_obj = MyClass()
print(hasattr(my_obj, 'my_attr'))  # Output: True
print(hasattr(my_obj, 'non_existent_attr'))  # Output: False
</code></pre>
reversed - используется для переворачивания последовательности (sequence). Пример:
<pre><code class="language-python">my_list = [1, 2, 3, 4, 5]
reversed_list = reversed(my_list)
print(list(reversed_list))  # Output: [5, 4, 3, 2, 1]
</code></pre>
<strong>import</strong> - используется для импорта модуля во время выполнения программы. Пример:
<pre><code class="language-python">my_module = __import__('math')
print(my_module.pi)  # Output: 3.141592653589793
</code></pre>
staticmethod - используется для создания метода класса, который не принимает первый аргумент self (или cls для методов класса). Пример:
<pre><code class="language-python">class MyClass:
    @staticmethod
    def my_static_method():
        print('This is a static method')

MyClass.my_static_method()  # Output: This is a static method
</code></pre>
setattr - используется для установки значения атрибута объекта. Пример:
<pre><code class="language-python">class MyClass:
    def __init__(self):
        self.my_attr = 42

my_obj = MyClass()
setattr(my_obj, 'my_attr', 43)
print(my_obj.my_attr)  # Output: 43
</code></pre>
property - используется для создания свойства объекта, которое можно читать и записывать, как обычный атрибут. Пример:
<pre><code class="language-python">class MyClass:
    def __init__(self):
        self._my_attr = 42

    @property
    def my_attr(self):
        return self._my_attr

    @my_attr.setter
    def my_attr(self, value):
        self._my_attr
</code></pre>
object - это базовый класс, от которого наследуются все остальные классы в Python. Пример:
<pre><code class="language-python">class MyClass(object):
    pass
</code></pre>
locals - используется для получения словаря с локальными переменными в текущем контексте выполнения. Пример:
<pre><code class="language-python">def my_func():
    a = 1
    b = 2
    print(locals())

my_func()  # Output: {'a': 1, 'b': 2}
</code></pre>
globals - используется для получения словаря с глобальными переменными в текущем модуле. Пример:
<pre><code class="language-python">my_var = 42
print(globals())  # Output: {'__name__': '__main__', '__doc__': None, '__package__': None, 'my_var': 42, ...}
</code></pre>
getattr - используется для получения значения атрибута объекта по его имени. Пример:
<pre><code class="language-python">class MyClass:
    def __init__(self):
        self.my_attr = 42

my_obj = MyClass()
print(getattr(my_obj, 'my_attr'))  # Output: 42
</code></pre>
complex - используется для создания комплексного числа. Пример:
<pre><code class="language-python">my_complex = complex(1, 2)
print(my_complex)  # Output: (1+2j)
</code></pre>
compile - используется для компиляции строки с кодом Python в объект-код. Пример:
<pre><code class="language-python">my_code = 'print(&quot;Hello, world!&quot;)'
my_compiled_code = compile(my_code, '&amp;lt;string&gt;', 'exec')
exec(my_compiled_code)  # Output: Hello, world!
</code></pre>
bytearray - это изменяемый тип данных, представляющий собой массив байтов. Пример:
<pre><code class="language-python">my_bytearray = bytearray([1, 2, 3, 4, 5])
print(my_bytearray)  # Output: bytearray(b'\x01\x02\x03\x04\x05')
</code></pre>
abs - используется для получения абсолютного значения числа. Пример:
<pre><code class="language-python">my_num = -42
print(abs(my_num))  # Output: 42
</code></pre>
bin - используется для получения двоичного представления числа. Пример:
<pre><code class="language-python">my_num = 42
print(bin(my_num))  # Output: 0b101010
</code></pre>
bytes - это неизменяемый тип данных, представляющий собой массив байтов. Пример:
<pre><code class="language-python">my_bytes = bytes([1, 2, 3, 4, 5])
print(my_bytes)  # Output: b'\x01\x02\x03\x04\x05'
</code></pre>
callable - используется для проверки, является ли объект вызываемым (т.е. функцией или методом). Пример:
<pre><code class="language-python">def my_func():
    pass

class MyClass:
    def my_method(self):
        pass

print(callable(my_func))  # Output: True
print(callable(MyClass().my_method))  # Output: True
print(callable(42))  # Output: False
</code></pre>
chr - используется для получения символа Unicode по его коду. Пример:
<pre><code class="language-python">my_char = chr(97)
print(my_char)  # Output: 'a'
</code></pre>
classmethod - используется для создания метода класса. Этот метод может быть вызван без создания экземпляра класса. Пример:
<pre><code class="language-python">class MyClass:
    my_class_attr = 42

    @classmethod
    def my_class_method(cls):
        print(cls.my_class_attr)

MyClass.my_class_method()  # Output: 42
</code></pre>
delattr - используется для удаления атрибута объекта. Пример:
<pre><code class="language-python">class MyClass:
    my_attr = 42

my_obj = MyClass()
delattr(my_obj, 'my_attr')
print(hasattr(my_obj, 'my_attr'))  # Output: False
</code></pre>
dir - используется для получения списка всех атрибутов объекта. Пример:
<pre><code class="language-python">my_list = [1, 2, 3]
print(dir(my_list))  # Output: ['__add__', '__class__', '__contains__', ...]
</code></pre>
divmod - используется для получения частного и остатка от деления двух чисел. Пример:
<pre><code class="language-python">my_divmod = divmod(42, 5)
print(my_divmod)  # Output: (8, 2)
</code></pre>
filter - используется для фильтрации элементов последовательности с помощью функции. Пример:
<pre><code class="language-python">my_list = [1, 2, 3, 4, 5]
my_filtered_list = list(filter(lambda x: x % 2 == 0, my_list))
print(my_filtered_list)  # Output: [2, 4]
</code></pre>
oct - используется для получения восьмеричного представления числа. Пример:
<pre><code class="language-python">my_num = 42
print(oct(my_num))  # Output: 0o52
</code></pre>
nonlocal - используется для объявления переменной из внешней области видимости внутри функции. Пример:
<pre><code class="language-python">def my_func():
    my_var = 42
    def inner_func():
        nonlocal my_var
        my_var = 43
    inner_func()
    print(my_var)

my_func()  # Output: 43
</code></pre>