Функции можно назвать небольшими подпрограммами, куда можно вынести повторяющийся код и обращаться к нему, когда это будет нужно. 
Функции значительно облегчают построение программ, так как нам не надо копировать 
однотипный код множество раз, а можно просто воспользоваться одной общей функцией.
Многие путают функции и методы и не понимают отличий между ними. 
На самом деле отличий нет, так как что методы, что функции являются одним и тем же. 
Функции что записаны вне классов называют функциями, а функции что записаны внутри классов называются методами. 
Поскольку C++ это не объектно ориентированный язык, то лучше говорить функции, хотя это не имеет никакого значения.
Точно такая же ситуация обстоит с переменным. В классах переменные называются полями, а вне классов - переменными.
Для создания функций необходимо указать возвращаемый тип данных, указать название и параметры.
В случае когда функция ничего не возвращает, то указывается тип данных void.
Все функции необходимо записывать перед созданием функции main().
В таком случае при вызове функций у вас не будет появляются ошибок.
Также функции можно лишь объявить перед функцией «main», а после неё прописать.
Создание функции
На основе всех данных наша функция будет выглядеть следующим образом:
<pre><code class="language-cpp">void test () {
    cout &amp;lt;&amp;lt; &quot;Вывод чего-либо в консоль&quot; &amp;lt;&amp;lt; endl;
}
</code></pre>
Функция выше не принимает никаких параметров и ничего не возвращает.
Она просто пишет слово в консоль. Давайте разнообразим функцию и добавим параметр:
<pre><code class="language-cpp">void test (char symbol) {
    cout &amp;lt;&amp;lt; symbol &amp;lt;&amp;lt; endl;
}
</code></pre>
Теперь функция принимает параметр, который будет отображен в консоли.
Также было бы логично прописать описание функции перед функцией «main»:
<pre><code class="language-cpp">void test (char symbol);
</code></pre>
Если функция должна что-либо вернуть, то прописываем тип данных который будет возвращен.
Для возвращения данных используем ключевое слово return:
<pre><code class="language-cpp">double test (double some_number) {
    some_number *= 2;
    return some_number;
}
</code></pre>