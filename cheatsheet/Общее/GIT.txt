https://git-scm.com/
<table>
<thead>
<tr>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>git config --global user.name "EgorKhabarov"</td>
</tr>
<tr>
<td>git config --global user.email "not.a.fan.of.broccoli@gmail.com"</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>git init</td>
<td>инициализация нового репозитория</td>
</tr>
<tr>
<td>git clone [url]</td>
<td>клонирование существующего репозитория</td>
</tr>
<tr>
<td>git add [file]</td>
<td>добавление файла в индекс</td>
</tr>
<tr>
<td>git commit -m "message"</td>
<td>коммит с сообщением</td>
</tr>
<tr>
<td>git diff</td>
<td>просмотр изменений в файлах</td>
</tr>
<tr>
<td>git status</td>
<td>просмотр текущего статуса репозитория&lt;br&gt;Tracked - файлы, о которых знает Git и которые добавляются в репозиторий.&lt;br&gt;Untracked - файлы, находящиеся в вашем рабочем каталоге, но не добавленные в репозиторий</td>
</tr>
<tr>
<td>git branch</td>
<td>просмотр списка веток</td>
</tr>
<tr>
<td>git checkout [branch/commit]</td>
<td>переключение на другую ветку/коммит</td>
</tr>
<tr>
<td>git merge [branch]</td>
<td>слияние ветки с текущей</td>
</tr>
<tr>
<td>git pull</td>
<td>получение и обновление удалённой ветки</td>
</tr>
<tr>
<td>git push</td>
<td>отправка изменений на удалённый репозиторий</td>
</tr>
<tr>
<td>git log</td>
<td>просмотр истории коммитов</td>
</tr>
<tr>
<td>git reset [file]</td>
<td>сброс индексации файла</td>
</tr>
<tr>
<td>git rm [file]</td>
<td>удаление файла из репозитория</td>
</tr>
<tr>
<td>mkdir [path]</td>
<td>сделать новый каталог</td>
</tr>
<tr>
<td>cd [path]</td>
<td>изменяет текущий рабочий каталог</td>
</tr>
<tr>
<td>git init</td>
<td>инициализировать Git в этой папке</td>
</tr>
<tr>
<td>git status</td>
<td>проверяем статус</td>
</tr>
<tr>
<td>git add [file_name]</td>
<td>подготавливаем файл&lt;br&gt;Использование --all вместо отдельных имен файлов приведет к&lt;br&gt;stage изменению всех (новых, измененных и удаленных) файлов.&lt;br&gt;Сокращенная команда git add --all для git add -A</td>
</tr>
<tr>
<td>git status</td>
<td>проверяем статус</td>
</tr>
<tr>
<td>git commit -m "комментарий"</td>
<td>подтверждаем</td>
</tr>
</tbody>
</table>
Git Commit без этапа
git status --short            увидеть изменения в более компактном виде
git commit -a -m "комментарий"
Обычно не рекомендуется пропускать промежуточную среду.
Пропуск этапа этапа иногда может привести к включению нежелательных изменений.
Новая ветка Git
Мы работаем в нашем локальном репозитории 
и не хотим нарушать или разрушать основной проект.
<pre><code>git branch name               создаем новый ветки
git checkout name             извлечение файла ветки
git commit -m &quot;комментарий&quot;   подтверждаем
</code></pre>
Аварийное отделение
Теперь представьте, что мы еще не закончили с образами hello-world, 
но нам нужно исправить ошибку на master. Я не хочу связываться с master напрямую, 
и я не хочу связываться с образами hello-world, так как это еще не сделано.
<pre><code>git checkout -b emergency-fix создаем новую ветку для решения чрезвычайной ситуации
git status
git add name
git commit -m &quot;комментарий&quot;
</code></pre>
Объединить ветки
У нас готово аварийное исправление, 
поэтому давайте объединим ветки master и Emergency-fix.
Во-первых, нам нужно перейти на ветку master:
<pre><code>git checkout master
git merge emergency-fix       объединяем текущую ветку (master) с Emergency-fix
git branch -d emergency-fix   удалить Emergency-Fix
</code></pre>
Объединить конфликт
<pre><code>git checkout hello-world-images
git add --all
git commit -m &quot;added new image&quot;
</code></pre>